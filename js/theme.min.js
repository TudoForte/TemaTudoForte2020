// ROUND
// ROUND
(function () {
  /**
	 * Ajuste decimal de um número.
	 *
	 * @param	{String}	type	O tipo de arredondamento.
	 * @param	{Number}	value	O número a arredondar.
	 * @param	{Integer}	exp		O expoente (o logaritmo decimal da base pretendida).
	 * @returns	{Number}			O valor depois de ajustado.
	 */

  function decimalAdjust (type, value, exp) {
    // Se exp é indefinido ou zero...
    if (typeof exp === 'undefined' || +exp === 0) {
      return Math[type] (value);
    }
    value = +value;
    exp = +exp;
    // Se o valor não é um número ou o exp não é inteiro...
    if (isNaN (value) || !(typeof exp === 'number' && exp % 1 === 0)) {
      return NaN;
    }
    // Transformando para string
    value = value.toString ().split ('e');
    value = Math[type] (
      +(value[0] + 'e' + (value[1] ? +value[1] - exp : -exp))
    );
    // Transformando de volta
    value = value.toString ().split ('e');
    return +(value[0] + 'e' + (value[1] ? +value[1] + exp : exp));
  }

  // Arredondamento decimal
  if (!Math.round10) {
    Math.round10 = function (value, exp) {
      return decimalAdjust ('round', value, exp);
    };
  }
  // Decimal arredondado para baixo
  if (!Math.floor10) {
    Math.floor10 = function (value, exp) {
      return decimalAdjust ('floor', value, exp);
    };
  }
  // Decimal arredondado para cima
  if (!Math.ceil10) {
    Math.ceil10 = function (value, exp) {
      return decimalAdjust ('ceil', value, exp);
    };
  }
}) ();

// CONVERT FLOAT NUMBER
let filterFloat = function (value) {
  if (/^(\-|\+)?([0-9]+(\.[0-9]+)?|Infinity)$/.test (value))
    return Number (value);
  return NaN;
};

// CONFIG BANNER PRINCIPAL HOME
let swiperBannerHome = new Swiper ('.banner-home', {
  // OPTIONAL PARAMS
  direction: 'horizontal',
  loop: true,
  effect: 'fade',
  // IF WE NEED PAGINATION
  pagination: {
    el: '.swiper-pagination',
    dynamicBullets: true,
  },
  autoplay: {
    delay: 6000,
    // disableOnInteraction: false,
  },
  navigation: {
    nextEl: '.swiper-button-next',
    prevEl: '.swiper-button-prev',
  },
});

// CONFIG BANNER HOME PRODUCT
let swiperBannerProduct = new Swiper ('.product-slider', {
  runCallbacksOnInit: true,
  loop: true,
   // IF WE NEED PAGINATION
   pagination: {
    el: '.swiper-pagination',
  },
  navigation: {
    nextEl: '.swiper-button-next',
    prevEl: '.swiper-button-prev',
  },
  slidesPerView: 1,
  breakpoints: {
    425: {
      slidesPerView: 2,
      spaceBetween: 10,
    },
    640: {
      slidesPerView: 3,
      spaceBetween: 20,
    },
    768: {
      slidesPerView: 4,
      spaceBetween: 25,
    },
    1024: {
      slidesPerView: 5,
      spaceBetween: 15,
    },
  },
});

// CONFIG BANNER HOME BRAND
let swiperBannerHomeBrand = new Swiper ('.banner-brands', {
  loop: true,
  slidesPerView: 3,
  autoplay: {
    delay: 2500,
    disableOnInteraction: true,
  },
  breakpoints: {
    425: {
      slidesPerView: 3,
      spaceBetween: 10,
    },
    640: {
      slidesPerView: 3,
      spaceBetween: 20,
    },
    768: {
      slidesPerView: 4,
      spaceBetween: 25,
    },
    1024: {
      slidesPerView: 5,
      spaceBetween: 25,
    },
  },
});

let productId;
let variantId;

// CONFIG BANNER RATING PRODUCT
var swiperBannerRatingProduct = new Swiper ('#swiper-rating-product', {
  slidesPerView: 1,
    autoplay: {
      delay: 3000,
      disableOnInteraction: true,
    },
    // IF WE NEED PAGINATION
    pagination: {
      el: '.swiper-pagination',
    },
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
  breakpoints: {
    640: {
      slidesPerView: 1,
    },
    768: {
      slidesPerView: 2,
    },
    1024: {
      slidesPerView: 3,
    },
  },
});

// SIDEBAR HOME
document.querySelectorAll ('[data-toggle-sidebar]').forEach (toggle => {
  toggle.addEventListener ('click', e => {
    const sidebarID = toggle.dataset.toggleSidebar;
    const sidebarElement = sidebarID
      ? document.getElementById (sidebarID)
      : undefined;

    if (sidebarElement) {
      let sidebarState = sidebarElement.getAttribute ('aria-hidden');
      sidebarElement.setAttribute (
        'aria-hidden',
        sidebarState == 'true' ? false : true
      );
    }

    getCart();
    
  });
});

// STOP SCROLL
function addClassBody() {
  let body = document.getElementsByTagName ('Body')[0];
  body.classList.add ('scroll');

  let element = document.getElementById('sidebar-backdrop');
  element.style.visibility = 'visible';

  
  // if(document.getElementById("cart-float") !== null){
  //   document.getElementById("cart-float").style.display = "none";
  // }
}

function removeClassBody() {
  let body = document.getElementsByTagName ('Body')[0];
  body.classList.remove ('scroll');

  let element = document.getElementById('sidebar-backdrop');
  element.style.visibility = 'hidden';
}

// GET STAR PRODUCT
document.querySelectorAll ('[data-app]').forEach (async product => {
  let productId = product.dataset.product;

  URL_TO_FETCH_RATING_PRODUCT = `//cl.avis-verifies.com/br/cache/5/a/4/5a440199-2c8f-3324-9d23-8788cc5b3ec9/AWS/PRODUCT_API/AVERAGE/all_products.json`;

  await axios.get (URL_TO_FETCH_RATING_PRODUCT).then (response => {
    if (response.data[productId] !== undefined) {
      const ratingValue = response.data[productId].rate;
      const ratingCount = response.data[productId].nb_reviews;

      let ratingComponent = `
        <div class="rating-holder">
            <div class="c-rating c-rating--small" data-rating-value="${parseInt (ratingValue)}">
                <button>1</button>
                <button>2</button>
                <button>3</button>
                <button>4</button>
                <button>5</button>
                <span>(${ratingCount})</span>
            </div>
            
        </div>
    `;

      document.getElementById (
        `rating-${productId}`
      ).innerHTML = ratingComponent;
    }
  });
});

// ADD CART AFTER CLICK BUTTON PRODUCT
document.querySelectorAll('[data-app]').forEach(button => {
  button.addEventListener ('click', event => {
    productId = button.dataset.product;

    // GET PRODUCT INFO
    URL_TO_FETCH_PRODUCT = '/web_api/products/' + productId;
    // console.log(URL_TO_FETCH_PRODUCT);

    // POST CART
    URL_TO_FETCH_CART = '/web_api/carts/';
    // console.log(URL_TO_FETCH_CART);

    // GET VARIATN ID
    URL_TO_FETCH_VARIANT = `/web_api/variants/?product_id=${productId}&sort=price_asc&attrs=Variant.price`;

    const dataSession = document
      .getElementsByTagName ('html')[0]
      .getAttribute ('data-session');
    // console.log(dataSession);

    // GET QUANTITY
    const parent = button.parentElement;
    const inputQuantity = parent.getElementsByClassName('quantity').quantity.value;
    console.log('Quantidade Produto', inputQuantity);

    async function createCart (url, data) {
      await axios ({
        method: 'POST',
        url: url,
        data: data,
      }).then (function (response) {
        // console.log('Adicionado Carrinho!', response);

        //UPDATE QUANTITY CART HOME HEADER
        let elementQuantityCart = document.querySelectorAll (
          '[data-cart=amount]'
        )[0];
        let valueQuantityCart =
          parseInt (elementQuantityCart.textContent) + parseInt (inputQuantity);

        elementQuantityCart.textContent = valueQuantityCart;
        
        getCart();        
        // openSidebar();
        
      })
      .catch(error => {
         let errorCart = error.response.data.causes.Cart.product_id[0]

         document.getElementById ('sidebar-cart').innerHTML =
         `<li><p class="blocoAlerta">${errorCart}</p></li>`;

      });
      
    }

    axios.get(URL_TO_FETCH_PRODUCT).then (function (response) {
      console.log('Produto info', response);

      // console.log('axios get', response.data.Product.has_variation);

      if (response.data.Product.has_variation === '0') {
        // console.log('Nao tem variacao');

        let data = {
          Cart: {
            session_id: dataSession,
            product_id: productId,
            quantity: inputQuantity,
          },
        };

        createCart (URL_TO_FETCH_CART, data);
      } else {
        // console.log('Tem variacao');

        if (variantId === undefined) {
          axios.get (URL_TO_FETCH_VARIANT).then (function (response) {
            // console.log('variant ordenado', response.data.Variants[0].Variant.id)
            let variantId = response.data.Variants[0].Variant.id;

            let data = {
              Cart: {
                session_id: dataSession,
                product_id: productId,
                quantity: inputQuantity,
                variant_id: variantId,
              },
            };

              createCart (URL_TO_FETCH_CART, data);

          });
        } else {
          let data = {
            Cart: {
              session_id: dataSession,
              product_id: productId,
              quantity: inputQuantity,
              variant_id: variantId,
            },
          };

            createCart (URL_TO_FETCH_CART, data);

        }
      }
    });
  });
});

function openSidebar() {
    const sidebarElement = document.getElementById ('sidebarCart');
    let sidebarState = sidebarElement.getAttribute ('aria-hidden');
    sidebarElement.setAttribute ('aria-hidden', (sidebarState = false));

    addClassBody();

    // if(document.getElementById("cart-float") !== null){
    //   document.getElementById("cart-float").style.display = "none";
    // }

}

function closeSidebar() {
  const sidebarElement = document.getElementById ('sidebarCart');
  let sidebarState = sidebarElement.getAttribute ('aria-hidden');
  sidebarElement.setAttribute ('aria-hidden', (sidebarState = true));

  let element = document.getElementById('sidebar-backdrop');
  element.style.visibility = 'hidden';

  removeClassBody();

  
  // if(document.getElementById("cart-float") !== null){
  //   document.getElementById("cart-float").style.display = "block";
  // }

}


function cashPrice (price) {
  let precoPrazo = price;
  let porcentagem = parseFloat ('7');
  let totalDesconto = precoPrazo * (porcentagem / 100);

  precoVista = around10(precoPrazo - totalDesconto);

  console.log(precoVista)

  let precoVistaString = precoVista.toString()
  let precoVistaUpdate = getMoney(precoVistaString)

  return formatReal(precoVistaUpdate);
  
}

async function getCart() {
  let dataSession = document
    .getElementsByTagName ('html')[0]
    .getAttribute ('data-session');
  // console.log(dataSession);

  let URL = 'https://www.tudoforte.com.br';
  let URL_TO_FETCH_GET_CART = `${URL}/web_api/carts/${dataSession}/`;

  await axios
    .get (URL_TO_FETCH_GET_CART)
    .then (function (response) {
      console.log (response);

      let productCart;
      let productPriceSubTotal = [];

      let mapCart = response.data.map (item => {
        let productId = item.Cart.product_id;
        let productVariantId = item.Cart.variant_id;
        let productName = item.Cart.product_name;
        let productImage = item.Cart.product_image.thumbs[180].https;
        let productQuantity = item.Cart.quantity;
        let productPrice = item.Cart.price * productQuantity;
        let productPriceCash = cashPrice(productPrice);


        let productPriceRound = around10(productPrice)
        let productPriceString = productPriceRound.toString()
        let productPriceFormat = getMoney(productPriceString)


        // ADD PRODUCTPRICE
        productPriceSubTotal.push(filterFloat (productPrice));

        return (productCart = `
            <li class="sidebar-product-wrapper" id="${productId}">
              <img class="sibebar-product-image" src="${productImage}" alt="${productName}" />
              <div class="sidebar-product-info">
                <h2 class="sibebar-product-title">${productName}</h2>
                <p class="sibebar-product-wrapper-quantity">Quantidade:<span>${productQuantity}</span> <button onClick="productDelete(this.id, ${productVariantId})" id="${productId}"><i class="fa fa-trash"></i></button></p>
                <p class="sibebar-product-wrapper-price"><span>R$ ${productPriceCash} À Vista</span> <span>R$ ${formatReal(productPriceFormat)}</span></p>
              </div>
            </li>
          `);
      });



      // SOMA PRICE PARA ADICIONAR NO PRICESUBTOTAL
      let priceSubTotal = productPriceSubTotal.reduce (function (
        acumulador,
        valorAtual,
        index,
        array
      ) {
        return acumulador + valorAtual;
      });

      // LIMPA SIDEBAR PARA NAO APARECER ITEM REPETIDO
      document.getElementById ('sidebar-cart').innerHTML = '';

      // ADD CADA ITEM NO CART
      mapCart.forEach (item => {
        document
          .getElementById ('sidebar-cart')
          .insertAdjacentHTML ('beforeend', item);
      });

      // ADD PRICESUBTOTAL SIDEBAR
      let priceSubTotalAround = around10(priceSubTotal)
      let priceSubTotalString = priceSubTotalAround.toString()
      let priceSubTotalFormat = getMoney(priceSubTotalString)


      document.getElementById ('priceSubtotal').innerHTML = formatReal(priceSubTotalFormat)

      let element = document.getElementById('sidebar-backdrop');
      element.style.visibility = 'visible';
      
    })
    .catch (function (error) {
      // if (error.response.status === 404) {
        document.getElementById ('sidebar-cart').innerHTML =
          '<li><p>Carrinho Vazio!</p></li>';
        document.getElementById ('priceSubtotal').innerHTML = 0;
      // }
    });
}

async function productDelete (id, variantId) {
  let dataSession = document
    .getElementsByTagName ('html')[0]
    .getAttribute ('data-session');

  let URL = 'https://www.tudoforte.com.br';
  let DELETE_CART = `${URL}/web_api/carts/${dataSession}/${id}/${variantId}`;

  await axios.delete (DELETE_CART).then (function (response) {
    // console.log(response)

    let elementLi = document.getElementsByClassName ('sidebar-product-wrapper');
    let arrayLiCart = Array.from (elementLi);

    console.log (arrayLiCart);

    let quantity;

    arrayLiCart.forEach (item => {
      console.log ('item', item);

      if (item.getAttribute ('id') === id) {
        quantity = parseInt (
          item.childNodes[2].nextSibling.children[1].children[0].innerText
        );
        item.remove;
        getCart();
      }
    });

    let elementQuantityCart = document.querySelectorAll (
      '[data-cart=amount]'
    )[0];
    console.log ('elementQuantityCart', elementQuantityCart);

    let valueQuantityCart = parseInt (elementQuantityCart.textContent);
    console.log ('valueQuantityCart', valueQuantityCart);
    console.log ('quantity', quantity);

    elementQuantityCart.textContent = valueQuantityCart - quantity;
  });
}







// PAGE PRODUCT
if (document.body.contains (document.getElementById ('product-container'))) {
  productId = document
    .getElementById ('product-container')
    .getAttribute (['data-product']);

  async function getInfoProduct () {
    URL_TO_FETCH_PRODUCT = '/web_api/products/' + productId;

    await axios.get (URL_TO_FETCH_PRODUCT).then (function (response) {
      console.log ('Product', response.data.Product);

      let images = response.data.Product.ProductImage;
      let has_variation = response.data.Product.has_variation;
      let price = response.data.Product.price;
      let price_cash = response.data.Product.payment_option_details[0].value;
      let price_installment = response.data.Product.payment_option_details[1];
      let slug = response.data.Product.slug;
      let video = response.data.Product.video;
      let variant = response.data.Product.Variant;

      let imageStructuredData = images[0].https
      let nameStructuredData = response.data.Product.name
      let brandStructuredData = response.data.Product.brand
      let idStructuredData = response.data.Product.id
      let descriptionStructuredData = response.data.Product.description_small
      let priceStructuredData = response.data.Product.price
      let promotional_priceStructuredData = response.data.Product.promotional_price
      let activation_dateStructuredData = response.data.Product.activation_date
      let urlStructuredData = response.data.Product.url.https
      let eanStructuredData = response.data.Product.ean
      


      createGallery (images, slug, video);

      if (has_variation === '1') {
        getVariant (productId, 0);

        setTimeout (() => {
          getVariant (productId, 1);
        }, 200);
      }

      paymentOption();

    });
  }
  getInfoProduct();
  

  let productGallery;
  let galleryThumbs;
  let gallerySwiperThumbs;

  // CREATE GALLERY PAGE PRODUCT
  function createGallery (array, slug, video) {
    array.forEach (item => {
      let image = `<div class="swiper-slide"><img width="528" height="528" class="galleryImage" src="${item.https}" alt="${slug}" /></div>`;
      galleryItem = document
        .getElementsByClassName ('swiper-wrapper')[0]
        .insertAdjacentHTML ('beforeend', image);

      let thumbs = `
        <div class="swiper-slide">
          <img class="galleryImage" src="${item.https}" alt="${slug}" title="${slug}" />
        </div>
        `;
      galleryThumbs = document
        .getElementsByClassName ('swiper-wrapper')[1]
        .insertAdjacentHTML ('beforeend', thumbs);
    });

    if (video !== '') {
      let wrapperVideo = `<div class="swiper-slide galleryVideo"><iframe width="100%" height="100%" src="${video}" /></div>`;
      galleryItem = document
        .getElementsByClassName ('swiper-wrapper')[0]
        .insertAdjacentHTML ('beforeend', wrapperVideo);

      let thumbs = `
        <div class="swiper-slide"><img class="galleryImage" src="https://static3.tcdn.com.br/img/editor/up/332274/youtube.png" alt="Logo Youtube" title="Logo Youtube" /></div>
        `;
      galleryThumbs = document
        .getElementsByClassName ('swiper-wrapper')[1]
        .insertAdjacentHTML ('beforeend', thumbs);
    }

    gallerySwiperThumbs = new Swiper ('.gallery-thumbs', {
      spaceBetween: 5,
      slidesPerView: 15,
      direction: 'vertical',
      freeMode: true,
      loopedSlides: 5, //looped slides should be the same
      watchSlidesVisibility: true,
      watchSlidesProgress: true,
    });

    productGallery = new Swiper ('.wrapper-top', {
      pagination: {
        el: '.swiper-pagination',
        // dynamicBullets: true,
      },
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
      thumbs: {
        swiper: gallerySwiperThumbs,
      },
    });
  }

  async function getStructuredData() {
    URL_TO_FETCH_PRODUCT = '/web_api/products/' + productId;

    await axios.get (URL_TO_FETCH_PRODUCT).then (function (response) {
      console.log ('Product', response.data.Product);

      let images = response.data.Product.ProductImage;
      let imageStructuredData = images[0].https
      let nameStructuredData = response.data.Product.name
      let brandStructuredData = response.data.Product.brand
      let idStructuredData = response.data.Product.id
      let descriptionStructuredData = response.data.Product.description_small
      let priceStructuredData = response.data.Product.price
      let promotional_priceStructuredData = response.data.Product.promotional_price
      let urlStructuredData = response.data.Product.url.https
      let eanStructuredData = response.data.Product.ean


      let URL_TO_FETCH_RATING = `https://cl.avis-verifies.com/br/cache/5/a/4/5a440199-2c8f-3324-9d23-8788cc5b3ec9/AWS/PRODUCT_API/AVERAGE/${productId}.json`;
    
        axios.get(URL_TO_FETCH_RATING).then (response => {
          let result = response.data;

          let rate = result.rate;
          let count = result.count;

          let structuredData = `
              <script type="application/ld+json">
              {
                "@context": "https://schema.org",
                "@type": "Product",
                "aggregateRating": {
                  "@type": "AggregateRating",
                  "bestRating": "5",
                  "ratingCount": "${count}",
                  "ratingValue": "${rate}"
                },
                "url": "${urlStructuredData}",
                "image": "${imageStructuredData}",
                "name": "${nameStructuredData}",
                "brand": "${brandStructuredData}",
                "description": "${descriptionStructuredData}",
                "sku": "${idStructuredData}",
                "gtin13": "${eanStructuredData}",
                "offers": {
                  "@type": "AggregateOffer",
                  "priceCurrency": "R$",
                  "highPrice": "${priceStructuredData}",
                  "lowPrice": "${promotional_priceStructuredData}",
                  "offerCount": "1",
                  "itemCondition": "http://schema.org/NewCondition",
                  "availability": "https://schema.org/InStock",
                  "offers": [
                    {
                      "@type": "Offer",
                      "url": "${urlStructuredData}"
                    }
                  ]
                }
              }
              </script>
              ` 

              console.log(structuredData)
              document.getElementById('product-container').insertAdjacentHTML ('beforeend', structuredData);

        });

    })
  }
  getStructuredData() 


  

  // GET DATA FRETE
  function shippingSimulator (
    cep,
    quantity,
    variant_id,
    id_product,
    additional_information
  ) {
    let variant = variant_id === undefined ? 0 : variant_id;

    let URL_SHIPPING_SIMULATOR = `
      https://www.tudoforte.com.br/mvc/store/product/shipping/?loja=332274&simular=ok&cep1=${cep}&quantidade=${quantity}&variacao=${variant}&id_produto=${id_product}&use_api=&additional_information=${additional_information}`;

    console.log (URL_SHIPPING_SIMULATOR);

    axios.get (URL_SHIPPING_SIMULATOR).then (function (response) {
      let result = response.data;

      let wrapperShipping = document.getElementsByClassName (
        'wrapper-shipping'
      )[0];
      wrapperShipping.insertAdjacentHTML ('beforeend', result);
      
      document.getElementsByClassName('shipping-button-close')[0].style.opacity = '1'

    });
  }

  function cleanShipping () {
    let result = document.getElementById ('Page');

    if (result !== null) {
      result.remove ();
    }

    document.getElementsByClassName('shipping-button-close')[0].style.opacity = '0'
  }

  function cleanAlertShipping () {
    let shippingAlert = document.getElementsByClassName ('shipping-alert')[0];

    if (shippingAlert !== undefined) {
      shippingAlert.remove ();
    }
  }

  function getShipping () {
    cleanShipping ();

    let cep = document.getElementById ('shipping').value;

    if (cep !== '') {
      cleanAlertShipping ();

      let quantity = document.getElementById ('quant').value;

      updateVariant ();

      setTimeout (() => {
        shippingSimulator (
          cep,
          quantity,
          variantId,
          productId,
          (additional_information = '')
        );
      }, 300);
    } else {
      let shippingAlert = `<p class="shipping-alert">Digite o seu CEP, por favor.</p>`;

      let wrapperShipping = document.getElementsByClassName (
        'wrapper-shipping'
      )[0];

      let shippingAlertVerify = document.getElementsByClassName (
        'shipping-alert'
      )[0];

      if (shippingAlertVerify === undefined) {
        wrapperShipping.insertAdjacentHTML ('beforeend', shippingAlert);
      }
    }
  }

  // GET VARIANT
  // VALUE 0 PRIMARY VARIANT
  // VALUE 1 SECOND VARIANT
  function getVariant (id, type) {
    URL_TO_FETCH_VARIANT = `/web_api/variants/?product_id=${id}&limit=50`;

  axios.get (URL_TO_FETCH_VARIANT).then (response => {
      // DEFINE PRODUCTID
      let productId = response.data.Variants[0].Variant.product_id;
      let wrapperVariant = document.getElementsByClassName (
        'wrapper-variants'
      )[0];
      wrapperVariant.setAttribute ('id', productId);

      console.log('retorno variant',response.data)

      let arrayVariant = [];
      let variantType;

      response.data.Variants.forEach (item => {
        console.log (item);

        item.Variant.id;
        item.Variant.price;
        item.Variant.payment_option_details;
        item.Variant.VariantImage;
        variantType = `${item.Variant.Sku[type].type}`;
        let variantValue = `${item.Variant.Sku[type].value}`;

        arrayVariant.push (variantValue);
      });

      let variantsWrapperType = `
            <div class="wrapper-variants wrapper-variants-${variantType}">
              <h3 class="variants-title">${variantType}</h3>
              <ul class="variants-list variants-list-${variantType}">
              
              </ul>
            </div>
            `;

      let wrapperVariants = document.getElementsByClassName (
        'wrapper-variants'
      )[0];
      wrapperVariants.insertAdjacentHTML ('beforeend', variantsWrapperType);

      let arrayVariantModify = arrayVariant.filter (function (
        elem,
        index,
        self
      ) {
        return index === self.indexOf (elem);
      });

      arrayVariantModify.forEach (variant => {
        let variantsList = document.getElementsByClassName (
          `variants-list-${variantType}`
        )[0];

        let variantsListItem = `
                  <li class="variants-list-item">
                    <input id="${variant}" type="radio" name="${variantType}" value="${variant}" onClick="updateVariant()">
                    <label for="${variant}" class="radio">${variant}</label>
                  </li>  
              `;
        variantsList.insertAdjacentHTML ('beforeend', variantsListItem);
      });

      let inputChecked = (document.getElementsByClassName (
        `variants-list-${variantType}`
      )[0].firstElementChild.firstElementChild.checked = true);
    });
  }

  function updateVariant () {
    var inputVariants = document.querySelectorAll ('input[type="radio"]');

    let variantsAttributes = [];

    for (var i = 0; i < inputVariants.length; i++) {
      if (inputVariants[i].checked === true) {
        variantsAttributes.push (inputVariants[i].value);
      }
    }

    let id = document
      .getElementById ('product-container')
      .getAttribute (['data-product']);

    let variantPrimary = encodeURIComponent (variantsAttributes[0]);
    let variantSecond = variantsAttributes[1] === undefined
      ? ''
      : encodeURIComponent (variantsAttributes[1]);

    URL_TO_FETCH_VARIANT = `https://www.tudoforte.com.br/web_api/variants/?product_id=${id}&limit=50&value_1=${variantPrimary}&value_2=${variantSecond}`;

    axios.get (URL_TO_FETCH_VARIANT).then (response => {
      console.log (response);

      variantId = response.data.Variants[0].Variant.id;
      productId = response.data.Variants[0].Variant.product_id;
      let images = response.data.Variants[0].Variant.VariantImage;
      let price = response.data.Variants[0].Variant.price;
      let price_cash = `R$ ${response.data.Variants[0].Variant.payment_option_details[0].value}`;
      let price_installment = `R$ ${response.data.Variants[0].Variant.payment_option_details[1].value}`;

      console.log (variantId);
      console.log (images);
      console.log (price);
      console.log (price_cash);
      console.log (price_installment);

      let priceCashUpdate = getMoney(price_cash)
      let priceInstallmentUpdate = getMoney(price_installment)



      let elementPrice = (document.getElementsByClassName ('price-cash')[0].innerHTML = `R$ ${formatReal(priceCashUpdate)}`);
      // let elementPriceFloat = (document.getElementsByClassName ('price-cash')[1].innerHTML = `R$ ${formatReal(priceCashUpdate)}`);
      let elementPriceInstallment = (document.getElementsByClassName ('price-installment')[1].innerHTML = `R$ ${formatReal(priceInstallmentUpdate)}` );

      URL_TO_FETCH_PRODUCT = '/web_api/products/' + productId;

      axios.get (URL_TO_FETCH_PRODUCT).then (function (response) {
        updateGallery (images, response.data.Product.slug);
        paymentOption()
      });
    });
  }

  // UPDATE GALLERY PAGE PRODUCT
  function updateGallery (array, slug) {
    productGallery.removeAllSlides ();

    array.forEach (item => {
      let image = `
        <div class="swiper-slide">
          <img class="galleryImage" src="${item.https}" alt=${slug} />
        </div>
        `;
      // galleryItem = document.getElementsByClassName('swiper-wrapper')[0].insertAdjacentHTML( 'beforeend', image )
      productGallery.appendSlide (image);
      productGallery.update ();
    });

    gallerySwiperThumbs.removeAllSlides ();

    array.forEach (item => {
      let thumbs = `
      <div class="swiper-slide">
        <img class="galleryImage" src="${item.https}" alt="${slug}" />
      </div>
      `;

      gallerySwiperThumbs.appendSlide (thumbs);
      gallerySwiperThumbs.update ();

      // galleryThumbs = document.getElementsByClassName('swiper-wrapper')[1].insertAdjacentHTML( 'beforeend', thumbs )
    });
  }

  // function getRatingProduct () {
  //   let URL_TO_FETCH_RATING = `https://cl.avis-verifies.com/br/cache/5/a/4/5a440199-2c8f-3324-9d23-8788cc5b3ec9/AWS/PRODUCT_API/REVIEWS/${productId}.json`;

  //   axios.get (URL_TO_FETCH_RATING).then (response => {
  //     let result = response.data;

  //     console.log (result);

  //     result.forEach (item => {
  //       let firstname = item.firstname;
  //       let rate = item.rate;
  //       let review = item.review;

  //       let review_date = item.review_date.split(' ');
  //       let date = review_date[0].split('-');
  //       let reverseDate = date.reverse();
  //       let newDate = reverseDate.join('/');

  //       let reviewComponent = `
  //               <div class="swiper-slide wrapper-rating-product-item">
  //                 <div id="rating" class="wrapper-rating-product">
  //                   <div class="wrapper-rating-product-title">
  //                       <h3 class="rating-product-title-name">${firstname}</h3><span class="rating-product-title-date">publicado em ${newDate}</span>
  //                   </div>

  //                   <div class="wrapper-rating">
  //                       <div class="rating-holder">
  //                       <div class="c-rating c-rating--small" data-rating-value="${parseInt (rate)}">
  //                           <button>1</button>
  //                           <button>2</button>
  //                           <button>3</button>
  //                           <button>4</button>
  //                           <button>5</button>
  //                       </div>
  //                   </div>
  //                   </div>

  //                   <p class="rating-product-depoiment">
  //                     ${review}
  //                   </p>

  //                 </div>
  //               </div>
  //               `;

  //       swiperBannerRatingProduct.appendSlide(reviewComponent);
  //       swiperBannerRatingProduct.update();

  //       getRating();
  //     });
  //   });
  // }
  // getRatingProduct ();

  function getRating() {
    let result = document.getElementsByClassName ('wrapper-rating-product');

    for(var i = 0; i < result.length; i++) {
      result[i].onclick = function () {
        this.classList.toggle ('-wrapper-text-full');
        console.log (
          this.getElementsByClassName (
            'rating-product-depoiment'
          )[0].classList.toggle ('-depoiment-text-full')
        );
      };
    }
  }
}


// UPDATE OPTION PAYMENT
function paymentOption(){
    
    let price = document.getElementsByClassName('price-cash')[0].innerText
    let wrapperListPrice = document.getElementsByClassName('wrapper-credit-list')[0]

    while (wrapperListPrice.firstChild) {
      wrapperListPrice.removeChild(wrapperListPrice.firstChild);
    }

    let priceItem = `<li class="credit-list-item">1x <strong> ${price} </strong> <span class="list-item-featured">C/ Desconto</span></li>`
    wrapperListPrice.insertAdjacentHTML('beforeend', priceItem)


    priceCash = `${price} à vista`

    let priceSlip = document.getElementsByClassName('bank-slip-value')[0]
    priceSlip.innerHTML = ''
    priceSlip.insertAdjacentHTML('beforeend', priceCash)

    let priceTransfer = document.getElementsByClassName('bank-transfer-value')[0]
    priceTransfer.innerHTML = ''
    priceTransfer.insertAdjacentHTML('beforeend', priceCash)


    let valuePlots = document.getElementsByClassName('price-installment')[1].innerText
    let valuePlotsUpdate = getMoney(valuePlots) * 12

    for(let i = 2; i <= 12; i++){
      let amount = parseInt(valuePlotsUpdate / i)

      let amountAjust = formatReal(amount) 

      let priceItemInstallment = `<li class="credit-list-item">${i}x <strong> R$ ${amountAjust} </strong> Sem Juros</li>`
      wrapperListPrice.insertAdjacentHTML('beforeend', priceItemInstallment)
    }
}



function around10(value){
  return Math.round10(value, -2).toFixed(2)
}

function getMoney(str)
{
  return parseInt(str.replace(/[\D]+/g,'') );
}

function formatReal( int )
{
        var tmp = int+'';
        tmp = tmp.replace(/([0-9]{2})$/g, ",$1");
        if( tmp.length > 6 )
                tmp = tmp.replace(/([0-9]{3}),([0-9]{2}$)/g, ".$1,$2");

        return tmp;
}



if(document.getElementById('Vitrine') !== null) {
  // ADD BUTTON PAGE SEARCH
  let buttonPageSearchNew = document.getElementById('Vitrine').childNodes[1].childNodes[1];
  let button = `<button type="submit" class="botao-commerce">BUSCAR</button>`;
  buttonPageSearchNew.insertAdjacentHTML('beforeend', button);
}

// BUTTON BUY
function buttonBuy(){

  setTimeout (() => {
    window.location.href = "/loja/carrinho.php?loja=332274";
  }, 300);
  
}


if(document.getElementById('form1') !== null) {
  let buttonPageContact = document.getElementById('form1')
  let button = `<button type="submit" class="botao-commerce">ENVIAR</button>`
  buttonPageContact.insertAdjacentHTML('beforeend', button)
}




// SharedCart
function createLinkCart(){
  
  let dataSession = document.getElementsByTagName('html')[0].getAttribute('data-session');

  console.log(dataSession);

  let URL = 'https://www.tudoforte.com.br';
  let URL_TO_FETCH_GET_CART = `${URL}/web_api/carts/${dataSession}/`;

  axios.get(URL_TO_FETCH_GET_CART).then(function (response){

      
      let arrayProduct = response.data;
      let products = []

      arrayProduct.forEach(
        item => {
          products.push(`${item.Cart.product_id}:${item.Cart.quantity}:${item.Cart.variant_id}`)
        }
      )

      var partner = document.getElementById('partnerId').value;

      if(partner === ''){
        partner = '1'
      }
       
      let productsCart = products.join()
      
      let APIURL = `https://carrinho.tudoforte.com.br/api/cart/session/share?products=${productsCart}&store=5575d5b8-da0f-11e8-bef0-0aa6f9202bba&partner=${partner}`;
      
      fetch(APIURL)
      .then(dataWrappedByPromise => dataWrappedByPromise.json())
      .then(data => {

        const urlShareCart = data.redirect;
        console.log(urlShareCart)

        document.getElementById('partnerId').value = urlShareCart;
        document.getElementById('sharedcart-buttons-whats').setAttribute('href', `http://api.whatsapp.com/send?1=pt_BR&text=${urlShareCart}`);
        document.getElementById('sharedcart-buttons-finish').setAttribute('href', urlShareCart);

        document.getElementById('sharedcart-buttons-copy').style.display = 'block';
        document.getElementById('sharedcart-buttons-whats').style.display = 'block';
        document.getElementById('sharedcart-buttons-finish').style.display = 'block';

        setTimeout(function(){
          document.getElementById('sharedcart-buttons-copy').style.display = 'none';
          document.getElementById('sharedcart-buttons-whats').style.display = 'none';
          document.getElementById('sharedcart-buttons-finish').style.display = 'none';
          document.getElementById('partnerId').value = '';
          cleanTextButtonCopy()
       
        }, 10000);


      })
  })

}

function copyToClipboard(){
  var copyText = document.getElementById('partnerId');
  copyText.select();
  copyText.setSelectionRange(0, 99999);
  document.execCommand("copy");

  changeTextButtonCopy()
  
}

function changeTextButtonCopy(){
  buttonCopy = document.getElementById('sharedcart-buttons-copy')
  buttonCopy.innerHTML = 'Link Copiado!';
}

function cleanTextButtonCopy(){
  buttonCopy = document.getElementById('sharedcart-buttons-copy')
  buttonCopy.innerHTML = 'Copiar';
}

function onlyNumbers(num) {
  var er = /[^0-9.]/;
  er.lastIndex = 0;
  var campo = num;
  if (er.test(campo.value)) {
    campo.value = "";
  }
}

function closeModalSharedCart(){
  let elementModal = document.getElementsByClassName('wrapper-sharedcart').item(0);
  elementModal.style.display = 'none';
}

function openModalSharedCart(){
  let elementModal = document.getElementsByClassName('wrapper-sharedcart').item(0);
  elementModal.style.display = 'block';
  window.scrollTo(0, 0);
}

function abrir() {
  const abrir = document.querySelector('.menumobile');
  abrir.classList.add('active');
  addClassBody()
}

function fechar() {
  const abrir = document.querySelector('.menumobile');
  abrir.classList.remove('active');
  removeClassBody()
}


// function insertButtonDescription(){
//     // ADD BUTTON PAGE SEARCH
//     let buttonPageProductDescription = document.getElementById('descricao');

//     let button = `<button id="buttonDescription" type="submit" class="button-more-description" onclick="openDescription()">Ver Descrição Completa</button>`;
    
//     if(buttonPageProductDescription !== null) {
//       buttonPageProductDescription.insertAdjacentHTML('afterend', button);
//     }
    
// }
// insertButtonDescription()


function openDescription(){

  let buttonPageProductDescription = document.getElementsByClassName('board')[0];
  buttonPageProductDescription.classList.add('board-active')

  let button = document.getElementById('buttonDescription')
  button.style.display = 'none';
  
}

function scrollFunctionHeader() {
  if (document.body.scrollTop > 1000 || document.documentElement.scrollTop > 1000) {

      if(document.getElementById("cart-float") !== null){
        document.getElementById("cart-float").style.position = "fixed";
      }

      document.getElementById("header").style.position = "fixed";

      let element = document.getElementsByClassName('wrapper-menu-top')[0];
      element.setAttribute("style", "display: none;")

      // document.getElementById("cart-float-mobile").style.opacity = "1";
      // document.getElementById("cart-float-mobile").style.zIndex = "0";



  }else {

      if(document.getElementById("cart-float") !== null){
        document.getElementById("cart-float").style.position = "relative";
      }

      document.getElementById("header").style.position = "relative";

      let element = document.getElementsByClassName('wrapper-menu-top')[0];
      element.removeAttribute("style")


      // document.getElementById("cart-float-mobile").style.opacity = "0";
      // document.getElementById("cart-float-mobile").style.zIndex = "-5";

  }
}


function scrollFunction() {
    if (document.body.scrollTop > 1300 || document.documentElement.scrollTop > 1300) {
      
        document.getElementById("myBtn").style.display = "block";  

    } else {
        document.getElementById("myBtn").style.display = "none";
    }
}

function topFunction() {
    // document.body.scrollTop = 0;
    // document.documentElement.scrollTop = 0;
    
    window.scroll({
      top: 0, 
      left: 0, 
      behavior: 'smooth',
    });
}

window.onscroll = function() {
    scrollFunctionHeader()
    scrollFunction()
}

function jump(h){

    window.scroll({
      top: 2500, 
      left: 0, 
      behavior: 'smooth',
    });

    window.scrollBy({ 
      top: 0, // could be negative value
      left: 0, 
      behavior: 'smooth', 
    });

    document.getElementById(h).scrollIntoView({
      behavior: 'smooth',
      block: 'center',
    });
}

// ELEMENT SIDEBAR LEFT MOBILE

function addSidebarLeftMobile(){
  var element = document.getElementsByClassName("wrapper-sidebar-left-mobile")[0];
  element.style.left = "0"; 
}

function removeSidebarLeftMobile(){
  var element = document.getElementsByClassName("wrapper-sidebar-left-mobile")[0];
  element.style.left = "-100%"; 
}


// ACCORDION SIDEBAR LEFT
var acc = document.getElementsByClassName("filter-accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;

    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}


async function createCartInstallation(){

   let url = '/web_api/carts/';
   const dataSession = document.getElementsByTagName ('html')[0].getAttribute ('data-session');

    let data = {
      Cart: {
        session_id: dataSession,
        product_id: 12242,
        quantity: 1,
      },
    };
 
     await axios({
       method: 'POST',
       url: url,
       data: data,
     }).then (function (response) {
       console.log('Adicionado Carrinho!', response);

       let elementQuantityCartInstallation = document.querySelectorAll ('[data-cart=amount]')[0];
       console.log ('elementQuantityCart', elementQuantityCartInstallation);
   
       let valueQuantityCartInstallation = parseInt(elementQuantityCartInstallation.textContent);
       elementQuantityCartInstallation.textContent = valueQuantityCartInstallation + 1;
   

     })
     .catch(error => {
        console.log('Erro', error);
     });
     
}


async function deleteCartInstallation() {

  let dataSession = document.getElementsByTagName ('html')[0].getAttribute ('data-session');

  let id = 12242;
  let URL = 'https://www.tudoforte.com.br';
  let DELETE_CART = `${URL}/web_api/carts/${dataSession}/${id}`;

  await axios.delete (DELETE_CART).then (function (response) {
    console.log(response)


    let elementQuantityCart = document.querySelectorAll ('[data-cart=amount]')[0];
    console.log ('elementQuantityCart', elementQuantityCart);

    let valueQuantityCart = parseInt(elementQuantityCart.textContent);
    elementQuantityCart.textContent = valueQuantityCart - 1;

  });
}


// async function verifyCartInstallation() {

//   let dataSession = document.getElementsByTagName ('html')[0].getAttribute ('data-session');

//   let URL = 'https://www.tudoforte.com.br';
//   let GET_CART = `${URL}/web_api/carts/${dataSession}`;

//   await axios.get (GET_CART).then(function (response) {
    
//       let quantityProductId = response.data.length;

//       let productHasCart

//       for(let i = 0; i < quantityProductId; i++) {

//           console.log(response.data[i].Cart.product_id)

//           if(response.data[i].Cart.product_id == 88){
//             productHasCart = 1
//           }
        
//       }

//       if(productHasCart === 1){
          
//         alert('Produto já foi adicionado!')
        
//       }else {
//         createCartInstallation()
//       }

//   }).catch(e => {
//     console.log(`erro ${e}`)
//   });
// }


function changeInstallation() {
  var decider = document.getElementById('installation');
  if(decider.checked){

      createCartInstallation()
      
  }else{
      deleteCartInstallation()
  }
}



// Modal Page Product

var modal = document.getElementById("info-cart-message");
var btn = document.getElementById("info-cart-message-button");
var span = document.getElementsByClassName("close")[0];

var modalFaleAnalista = document.getElementById("info-cart-message-fale-analista");
var btnFaleAnalista = document.getElementById("info-cart-message-fale-analista-button");
var spanFaleAnalista = document.getElementsByClassName("close-fale-analista")[0];

var modalInstalacaoTermoUso = document.getElementById("instalacao-termo-uso");
var btnInstalacaoTermoUso = document.getElementById("instalacao-termo-uso-button");
var spanInstalacaoTermoUso = document.getElementsByClassName("close-termo-uso-button")[0];



  if(btn != null){
  btn.onclick = function() {
    modal.style.display = "block";
  }

  if(btnFaleAnalista != null){
    btnFaleAnalista.onclick = function() {
      modalFaleAnalista.style.display = "block";
    }
  }

  if(btnInstalacaoTermoUso != null){
    btnInstalacaoTermoUso.onclick = function () {
      modalInstalacaoTermoUso.style.display = "block";
    }
  }


  span.onclick = function() {
    modal.style.display = "none";
  }
  
  window.onclick = function(event) {

    if (event.target == modal) {
      modal.style.display = "none";
    }
  
    if (event.target == modalFaleAnalista) {
      modalFaleAnalista.style.display = "none";
    }
  
    if (event.target == spanFaleAnalista) {
      modalFaleAnalista.style.display = "none";
    }
  
    if (event.target == modalInstalacaoTermoUso) {
      modalInstalacaoTermoUso.style.display = "none";
    }

    if (event.target == spanInstalacaoTermoUso) {
      modalInstalacaoTermoUso.style.display = "none";
    }

  }
  
}




// setTimeout(() => {

//   document.getElementsByName('form1')[0].parentNode.children[9].style.display = 'none'
//   document.getElementsByName('form1')[0].parentNode.children[10].style.display = 'none'
//   document.getElementsByName('form1')[0].parentNode.children[11].style.display = 'none'
//   document.getElementsByName('form1')[0].parentNode.children[12].style.display = 'none'
//   document.getElementsByName('form1')[0].parentNode.children[13].style.display = 'none'

// }, 5)